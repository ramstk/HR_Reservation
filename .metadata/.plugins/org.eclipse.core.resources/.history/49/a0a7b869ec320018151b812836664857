package com.solution.keypr.controller;

public class RateLimiterAspect {
	public interface KeyFactory {

	     String createKey(JoinPoint jp, RateLimit limit);

	 }

	 //private static final Logger LOGGER = LoggerFactory.getLogger(RateLimiterAspect.class);

	 private static final KeyFactory DEFAULT_KEY_FACTORY = (jp, limit) -> JoinPointToStringHelper.toString(jp);

	  

	 private final ConcurrentHashMap<String, RateLimiter> limiters;

	 private final KeyFactory keyFactory;



	 @Autowired

	 public RateLimiterAspect(Optional<KeyFactory> keyFactory) {

	     this.limiters = new ConcurrentHashMap<>();

	     this.keyFactory = keyFactory.orElse(DEFAULT_KEY_FACTORY);

	 }



	 @Before("@annotation(limit)")

	 public void rateLimit(JoinPoint jp, RateLimit limit) {

	     String key = createKey(jp, limit);

	     RateLimiter limiter = limiters.computeIfAbsent(key, createLimiter(limit));

	     double delay = limiter.acquire();

	     LOGGER.debug("Acquired rate limit permission ({} qps) for {} in {} seconds", limiter.getRate(), key, delay);

	 }



	 private Function<String, RateLimiter> createLimiter(RateLimit limit) {

	     return name -> RateLimiter.create(limit.value());

	 }



	 private String createKey(JoinPoint jp, RateLimit limit) {

	     return Optional.ofNullable(Strings.emptyToNull(limit.key()))

	             .orElseGet(() -> keyFactory.createKey(jp, limit));

	 }

	

}
