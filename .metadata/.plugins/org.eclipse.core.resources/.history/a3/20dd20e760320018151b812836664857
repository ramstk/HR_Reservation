package com.solution.keypr.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;
 
import javax.validation.Valid;
import java.util.List;
import java.util.Locale;

@ControllerAdvice
public class ControllerAdvicer {
	public class RestErrorHandler {

	    private MessageSource messageSource;

	    @Autowired
	    public RestErrorHandler(@Qualifier("messageSource") MessageSource messageSource) {
	        this.messageSource = messageSource;
	    }

	    @ExceptionHandler(MethodArgumentNotValidException.class)
	    @ResponseStatus(HttpStatus.BAD_REQUEST)
	    @ResponseBody
	    public ValidationError processValidationError(MethodArgumentNotValidException ex) {
	        BindingResult result = ex.getBindingResult();
	        List<FieldError> fieldErrors = result.getFieldErrors();

	        return this.processFieldErrors(fieldErrors);
	    }

	    private ValidationError processFieldErrors(List<FieldError> fieldErrors) {
	        ValidationError dto = new ValidationError();

	        for (FieldError fieldError : fieldErrors) {
	            String localizedErrorMessage = this.resolveLocalizedErrorMessage(fieldError);
	            dto.getErrors().put(fieldError.getField(), localizedErrorMessage);
	        }

	        return dto;
	    }

	    private String resolveLocalizedErrorMessage(FieldError fieldError) {
	        Locale currentLocale = LocaleContextHolder.getLocale();
	        String localizedErrorMessage = this.messageSource.getMessage(fieldError, currentLocale);

	        return localizedErrorMessage;
	    }
	

}
